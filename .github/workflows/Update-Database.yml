name: Update Database

on:
  push:
    branches: [ "main", "develop" ]

jobs:
  deploy-stage:
    runs-on: ubuntu-latest
    environment:
      name: stage

    steps:
      - name: Check out
        uses: actions/checkout@v3

      - name: Run Database in Container
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_USER_PASSWORD }}
        run: |
          docker compose up -d
          sleep 20

      - name: Populate database using docker compose exec
        env:
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_USER_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        run: |
          docker compose exec -T  mysql-dev mysql \
            -u"$MYSQL_USER" -p"$MYSQL_PASSWORD" "$MYSQL_DATABASE" < ./.docker/dump/database-insert.sql

      - name: Dump Database
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        run: |
          DUMP_FILE_NAME= $(date +'%Y-%m-%d-%H-%M-%S')-dump.sql
          docker exec -T mysql-dev \
          mysqldump -uroot -p $MYSQL_ROOT_PASSWORD $MYSQL_DATABASE > $DUMP_FILE_NAME
          echo "Dump created: $DUMP_FILE_NAME"

  deploy-prod:
    runs-on: ubuntu-latest
    environment:
      name: production

    steps:
      - name: Check out
        run: echo "Production deployment not implemented yet"