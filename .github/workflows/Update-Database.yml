name: Update Database

on:
  push:
    branches: [ "main", "develop" ]

jobs:
  deploy-stage:
    runs-on: ubuntu-latest
    environment:
      name: stage

    steps:
      - name: Check out
        uses: actions/checkout@v3

      - name: Build Java Jar
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build
        run: | 
          gradle compileJava
          gradle bootJar

      - name: Run Backend and Database Containers
        env:
          # Database Environment Variables
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_USER_PASSWORD }}

          # Backend Environment Variables (Correctly Referenced)
          ADMIN_USER: ${{ secrets.ADMIN_USER }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
          API_DOMAIN: 127.0.0.1
          API_PORT: 8080
        run: |
          docker compose -f docker-compose.deploy.yml up -d
          sleep 20  # Allow time for initialization

      - name: Dump Database
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        run: |
          DUMP_FILE_NAME=$(date +'%Y-%m-%d-%H-%M-%S')-dump.sql
          docker compose -f docker-compose.deploy.yml exec mysql-prod \
          mysqldump -uroot -p $MYSQL_ROOT_PASSWORD $MYSQL_DATABASE > $DUMP_FILE_NAME
          echo "Dump created: $DUMP_FILE_NAME"

  deploy-prod:
    runs-on: ubuntu-latest
    environment:
      name: production

    steps:
      - name: Check out
        run: echo "Production deployment not implemented yet"