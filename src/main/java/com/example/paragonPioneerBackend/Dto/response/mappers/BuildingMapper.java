package com.example.paragonPioneerBackend.Dto.response.mappers;

import com.example.paragonPioneerBackend.Entity.PopulationBuilding;
import com.example.paragonPioneerBackend.Entity.ProductionBuilding;
import com.example.paragonPioneerBackend.Entity.abstractEntity.Building;
import com.example.paragonPioneerBackend.Util.UuidUtil;
import lombok.*;
import org.springframework.stereotype.Component;

/**
 * The BuildingMapper class is a Spring component that implements the ResponseMapper interface.
 * It is used to map a Building entity to a BuildingMapper object.
 * The BuildingMapper object contains the properties of the Building entity as well as additional properties for the costs, required population, capacity, production per minute, and recipe.
 * The id, name, remarks, and slug are directly copied from the Building entity.
 * The costs are represented as IRIs (Internationalized Resource Identifiers), which are generated by the getIri method of the UuidUtil class.
 * The capacity and production per minute are only set if the Building entity is an instance of PopulationBuilding or ProductionBuilding, respectively.
 * The recipe is only set if the Building entity is an instance of ProductionBuilding.
 */
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Getter
@Component
public class BuildingMapper implements ResponseMapper<BuildingMapper, Building> {

    private String id;
    private String name;
    private String remarks;
    @Builder.Default
    private String[] costs = null;
    @Builder.Default
    private String requirePopulation = null;
    private String slug;
    // Only for population buildings
    @Builder.Default
    private Integer capacity = null;
    // Only for production buildings
    @Builder.Default
    private Float productionPerMinute = null;
    @Builder.Default
    private String recipe = null;

    /**
     * This method is used to map a Building entity to a BuildingMapper object.
     * It uses the builder pattern to create a new BuildingMapper object and sets its properties based on the properties of the Building entity.
     * The id, name, remarks, costs, and slug are directly copied from the Building entity.
     * The costs are represented as IRIs, which are generated by the getIri method of the UuidUtil class.
     * If the Building entity is an instance of PopulationBuilding, the capacity is set.
     * If the Building entity is an instance of ProductionBuilding, the production per minute and recipe are set.
     *
     * @param input The Building entity to be mapped.
     * @return A new BuildingMapper object with properties set based on the Building entity.
     */
    @Override
    public BuildingMapper map(Building input) {
        var mapper = BuildingMapper.builder()
                .id(input.getId().toString())
                .name(input.getName())
                .remarks(input.getRemarks())
                .costs(UuidUtil.getIri("goods/", input.getCosts()))
                .slug(input.getSlug());


        if (input instanceof PopulationBuilding) {
            mapper.capacity(((PopulationBuilding) input).getCapacity());
        } else if (input instanceof ProductionBuilding) {
            mapper.productionPerMinute(((ProductionBuilding) input).getProductionPerMinute());
            mapper.recipe(UuidUtil.getIri("recipe/", ((ProductionBuilding) input).getRecipe()));
        }
        return mapper.build();
    }
}