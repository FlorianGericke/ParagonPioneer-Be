package com.example.paragonPioneerBackend.Dto.response.mappers;

import com.example.paragonPioneerBackend.Entity.PopulationBuilding;
import com.example.paragonPioneerBackend.Entity.ProductionBuilding;
import com.example.paragonPioneerBackend.Entity.abstractEntity.Building;
import com.example.paragonPioneerBackend.Entity.joinTables.CostBuildingGoods;
import com.example.paragonPioneerBackend.Util.UuidUtil;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * The BuildingMapper class is a Spring component that implements the ResponseMapper interface.
 * It is used to map a Building entity to a BuildingMapper object.
 * The BuildingMapper object contains the properties of the Building entity as well as additional properties for the costs, required population, capacity, production per minute, and recipe.
 * The id, name, remarks, and slug are directly copied from the Building entity.
 * The costs are represented as IRIs (Internationalized Resource Identifiers), which are generated by the getIri method of the UuidUtil class.
 * The capacity and production per minute are only set if the Building entity is an instance of PopulationBuilding or ProductionBuilding, respectively.
 * The recipe is only set if the Building entity is an instance of ProductionBuilding.
 */
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Getter
@Component
public class BuildingMapper implements ResponseMapper<BuildingMapper, Building> {

    private String id;
    private String name;
    private String remarks;
    @Builder.Default
    private ArrayList<Map<String, String>> costs = null;
    @Builder.Default
    private HashMap<String, String> require = null;
    private String slug;
    @Builder.Default
    private Integer capacity = null;
    @Builder.Default
    private Float productionPerMinute = null;
    @Builder.Default
    private String recipe = null;

    /**
     * Maps a Building entity to a BuildingMapper object.
     * The costs are represented as a list of maps, where each map contains the properties "good" and "amount".
     * The "good" property is an IRI generated by the getIri method of the UuidUtil class.
     * The "amount" property is the amount of the good required.
     * The capacity is set if the Building entity is an instance of PopulationBuilding.
     * The production per minute and recipe are set if the Building entity is an instance of ProductionBuilding.
     *
     * @param input The Building entity to be mapped.
     * @return The BuildingMapper object containing the mapped properties.
     */
    @Override
    public BuildingMapper map(Building input) {
        var costs = new ArrayList<Map<String, String>>();
        if (input.getCosts() != null) {
            for (CostBuildingGoods costBuildingGoods : input.getCosts()) {
                var cost = new LinkedHashMap<String, String>();
                cost.put("good", UuidUtil.getIri("goods/", costBuildingGoods.getGood()));
                cost.put("amount", String.valueOf(costBuildingGoods.getAmount()));
                costs.add(cost);
            }
        }

        var require = new HashMap<String, String>();
        if (input.getRequirePopulation() != null) {
            require.put("population", UuidUtil.getIri("population/", input.getRequirePopulation().getPopulation()));
            require.put("amount", String.valueOf(input.getRequirePopulation().getAmount()));
        }

        var mapper = BuildingMapper.builder()
                .id(UuidUtil.getIri("building/", input))
                .name(input.getName())
                .remarks(input.getRemarks())
                .costs(costs)
                .require(require)
                .slug(input.getSlug());


        if (input instanceof PopulationBuilding) {
            mapper.capacity(((PopulationBuilding) input).getCapacity());
        } else if (input instanceof ProductionBuilding) {
            mapper.id(UuidUtil.getIri("building/productionBuilding/", input));
            mapper.productionPerMinute(((ProductionBuilding) input).getProductionPerMinute());
        }
        return mapper.build();
    }
}