package com.example.paragonPioneerBackend.Service;

import com.example.paragonPioneerBackend.Dto.requests.GoodInput;
import com.example.paragonPioneerBackend.Entity.Good;
import com.example.paragonPioneerBackend.Repository.GoodRepository;
import com.example.paragonPioneerBackend.Service.generic.SlugableService;
import com.example.paragonPioneerBackend.Util.ServiceUtil;
import com.example.paragonPioneerBackend.Util.SlugUtil;
import org.springframework.beans.factory.annotation.Autowired;

/**
 * Service class for managing goods in the application.
 * This class extends the generic BaseService to offer CRUD operations tailored to the Good entity.
 * It utilizes GoodDTO for data transfer and interacts with the GoodRepository for persistence operations.
 */
@org.springframework.stereotype.Service()
public class GoodService extends SlugableService<Good, GoodRepository, GoodInput> {

    /**
     * Constructor for GoodService, automatically wired with its repository.
     * Initializes the service with the GoodRepository to interact with the database.
     *
     * @param repository The GoodRepository instance for database operations.
     */
    @Autowired
    public GoodService(GoodRepository repository) {
        super(repository);
    }

    /**
     * This method is used to map a GoodInput object to a Good entity.
     * It uses the builder pattern to create a new Good object and sets its properties based on the properties of the GoodInput object.
     * The name, remarks, and isMapResource properties are directly copied from the GoodInput object.
     * The slug property is generated by calling the createSlug method of the SlugUtil class with the name of the GoodInput object.
     *
     * @param goodInput The GoodInput object to be mapped to a Good entity.
     * @return A new Good entity with properties set based on the GoodInput object.
     */
    @Override
    public Good mapToEntity(GoodInput goodInput) {
        return Good.builder()
                .name(goodInput.getName())
                .remarks(goodInput.getRemarks())
                .isMapResource(goodInput.isMapResource())
                .slug(SlugUtil.createSlug(goodInput.getName()))
                .build();
    }

    /**
     * This method is used to update the properties of a Good entity with the values from a GoodInput object.
     * It uses the patchHelper method of the ServiceUtil class to update each property of the Good entity.
     * The patchHelper method checks if the new value is null before updating the property. If the new value is null, the property is not updated.
     * This allows for partial updates of the Good entity, as any property of the GoodInput object that is not set will not affect the corresponding property of the Good entity.
     *
     * @param entityToUpdate The Good entity to be updated.
     * @param goodInput The GoodInput object containing the new values for the properties of the Good entity.
     * @return The updated Good entity.
     */
    @Override
    public Good patch(Good entityToUpdate, GoodInput goodInput) {
        entityToUpdate.setName(ServiceUtil.patchHelper(entityToUpdate.getName(), goodInput.getName()));
        entityToUpdate.setRemarks(ServiceUtil.patchHelper(entityToUpdate.getRemarks(), goodInput.getRemarks()));
        entityToUpdate.setMapResource(ServiceUtil.patchHelper(entityToUpdate.isMapResource(), goodInput.isMapResource()));
        return entityToUpdate;
    }
}